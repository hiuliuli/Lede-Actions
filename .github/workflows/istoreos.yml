name: Build Rockchip iStoreOS

on:
  workflow_dispatch:
    inputs:
      config_name:
        description: '配置文件名称'
        required: true
        default: 'default'
        type: string
        
env:
  FIRMWARE_TAG: rockchip
  CONFIG_NAMES: "default docker custom"
  CONFIG_PATH: config
  
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    
      - name: 输入验证
        run: |
          env="${{ inputs.config_name }}"
          if [[ "$env" =~ "${{ env.CONFIG_NAMES }}" ]]; then
            echo "Error: Invalid environment value '${env}'."
            exit 1
          fi
          echo "Input validation passed."

      - name: 检查服务器配置
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: 初始化环境
        run: |
          docker rmi $(docker images -q)
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz libnsl-dev ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
      
      - name: 合并磁盘
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          temp-reserve-mb: 100
          root-reserve-mb: 1024
      
      - name: 检出当前仓库文件
        uses: actions/checkout@main
      
      - name: 拉取目标仓库源码
        run: git clone https://github.com/istoreos/istoreos
      
      - name: 更新feeds
        run: |
          cd istoreos
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      
      - name: 生成.config文件
        run: |
          cat ${{ env.CONFIG_PATH }}/${{ inputs.config_name }}.config > .config
          echo -e 'CONFIG_DEVEL=y\nCONFIG_CCACHE=y' >> .config
          mv .config istoreos/
      
      - name: 下载dl文件
        run: |
          cd istoreos
          make defconfig
          make download -j$(nproc)
      
      - name: 编译固件
        run: |
          cd istoreos
          make V=s -j$(nproc)
      
      - name: 移动固件到用户目录
        run: mv istoreos/bin/targets/${{ env.FIRMWARE_TAG }}/**/*${{ env.FIRMWARE_TAG }}*.img.gz $PWD
      
      - name: 上传固件
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FIRMWARE_TAG }}
          path: ./*${{ env.FIRMWARE_TAG }}*.img.gz
          compression-level: 6    # 压缩级别0-9
          retention-days: 3       # 文件保留天数
